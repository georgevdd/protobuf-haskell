#summary Basics of Protocol Buffers in Haskell

= Protocol Buffer Basics: Haskell =

This tutorial provides a basic Haskell programmer's introduction to working with protocol buffers.  By walking through creating a simple example application, it shows you how to
  * Define message formats in a `.proto` file.
  * Use the protocol buffer compiler.
  * Use the Haskell protocol buffer API to write and read messages.
This isn't a comprehensive guide to using protocol buffers in Haskell. For more detailed reference information, see the [http://code.google.com/apis/protocolbuffers/docs/proto.html Protocol Buffer Language Guide], the [http://hackage.haskell.org/package/protocol-buffers Haskell API Reference], the (forthcoming) Haskell Generated Code Guide, and the [http://code.google.com/apis/protocolbuffers/docs/encoding.html Encoding Reference].

== Why Use Protocol Buffers? ==

The example we're going to use is a very simple "address book" application that can read and write people's contact details to and from a file. Each person in the address book has a name, an ID, an email address, and a contact phone number.

Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data such as this. The [http://code.google.com/apis/protocolbuffers/docs/overview.html Protocol Buffers Overview] compares their advantages to those of other approaches.

With protocol buffers, you write a `.proto` description of the data structure you wish to store. From that, the protocol buffer compiler creates code that implements automatic encoding and parsing of the protocol buffer data with an efficient binary format. The generated code provides representations for the fields that make up a protocol buffer and takes care of the details of reading and writing the protocol buffer as a unit. Importantly, the protocol buffer format supports the idea of extending the format over time in such a way that the code can still read data encoded with the old format.

== Where to Find the Example Code ==

== Defining Your Protocol Format ==

== Compiling Your Protocol Buffers ==

== The Protocol Buffer API ==

== Writing a Message ==

== Reading a Message ==

== Extending a Protocol Buffer ==

== Optimization Tips ==

== Advanced Usage ==